/*
 * 도시, 부서명, 이름, 성을 조회.
 */


SELECT LOC.CITY
     , DEP.DEPARTMENT_ID
     , EMP.FIRST_NAME
     , EMP.LAST_NAME
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 INNER JOIN LOCATIONS LOC
    ON LOC.LOCATION_ID = DEP.LOCATION_ID
;

/*
 * 'Canada'에 근무하는 사원의 이름과 부서명을 조회.
 */

SELECT EMP.FIRST_NAME
     , DEP.DEPARTMENT_NAME
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 INNER JOIN LOCATIONS LOC
    ON DEP.LOCATION_ID = LOC.LOCATION_ID
 INNER JOIN COUNTRIES CTR
    ON CTR.COUNTRY_ID = LOC.COUNTRY_ID
 WHERE CTR.COUNTRY_NAME = 'Canada'
;

-- 여기부터 강사님이 내주신 과제

/*
 * 'SA_REP' 직무인 사원의 이름, 성, 연봉, 부서명, 직무명을 조회
 */

SELECT EMP.FIRST_NAME
     , EMP.LAST_NAME
     , EMP.SALARY
     , DEP.DEPARTMENT_NAME
     , JOB.JOB_TITLE
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 INNER JOIN JOBS JOB
    ON EMP.JOB_ID = JOB.JOB_ID
 WHERE JOB.JOB_ID = 'SA_REP'
;


/*
 * 'MK_REP' 직무였던 사원의 이름, 성, 연봉, 부서명, 현재 직무명을 조회
 */

SELECT EMP.FIRST_NAME
     , EMP.LAST_NAME
     , EMP.SALARY
     , DEP.DEPARTMENT_NAME
     , JOB.JOB_TITLE
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 INNER JOIN JOB_HISTORY JH
    ON EMP.EMPLOYEE_ID = JH.EMPLOYEE_ID
 INNER JOIN JOBS JOB
    ON JH.JOB_ID = JOB.JOB_ID
 WHERE JH.JOB_ID = 'MK_REP'
;



/*
 * 'New Jersey' 주에서 근무중인 사원의 이름, 부서명, 연봉을 조회
 */

SELECT EMP.FIRST_NAME
     , DEP.DEPARTMENT_NAME
     , EMP.SALARY
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 INNER JOIN LOCATIONS LOC
    ON DEP.LOCATION_ID = LOC.LOCATION_ID
 WHERE LOC.STATE_PROVINCE = 'New Jersey'
;



/*
 * 'C'로 시작하는 도시에서 근무중인
 * 사원의 이름, 부서명, 직무명, 도시명을 조회
 */

SELECT EMP.FIRST_NAME
	 , DEP.DEPARTMENT_NAME
	 , JOB.JOB_TITLE
	 , LOC.CITY
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 INNER JOIN LOCATIONS LOC
    ON DEP.LOCATION_ID = LOC.LOCATION_ID
 INNER JOIN JOBS JOB
    ON EMP.JOB_ID = JOB.JOB_ID
 WHERE LOC.CITY LIKE 'C%'
;


/*
 * 우편번호에 '7' 이 포함된 도시에서 근무중인 
 * 사원들의 사원번호, 직무명을 조회
 */

SELECT EMP.EMPLOYEE_ID
     , JOB.JOB_TITLE
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 INNER JOIN JOBS JOB
    ON EMP.JOB_ID = JOB.JOB_ID
 INNER JOIN LOCATIONS LOC
    ON LOC.LOCATION_ID = DEP.LOCATION_ID
 WHERE LOC.POSTAL_CODE LIKE '%7%'
;




/*
 * 회사 전체 평균연봉보다 많은 연봉을 받는 사원들의 이름과 부서명을 조회
 */

-- 평균연봉 = 6461.831
SELECT AVG(SALARY)
  FROM EMPLOYEES
;

SELECT *
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 WHERE EMP.SALARY > 6461.831
;


-- 합치기
SELECT EMP.FIRST_NAME
     , DEP.DEPARTMENT_NAME
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 WHERE EMP.SALARY > (SELECT AVG(SALARY)
                       FROM EMPLOYEES)
;


/*
 * Asia에서 근무중인 사원들의
 * 사원번호, 이름, 성, 부서명, 직무명, 도시명을 조회
 */

SELECT EMP.EMPLOYEE_ID
     , EMP.FIRST_NAME
     , EMP.LAST_NAME
     , DEP.DEPARTMENT_NAME
     , JOB.JOB_TITLE
     , LOC.CITY
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 INNER JOIN LOCATIONS LOC
    ON DEP.LOCATION_ID = LOC.LOCATION_ID
 INNER JOIN COUNTRIES CTR
    ON LOC.COUNTRY_ID = CTR.COUNTRY_ID
 INNER JOIN REGIONS REG
    ON CTR.REGION_ID = REG.REGION_ID
 INNER JOIN JOBS JOB
    ON EMP.JOB_ID = JOB.JOB_ID
 WHERE REG.REGION_NAME = 'Asia'
;

-- OUTER JOIN

/*
 * 사원의 이름과 부서명을 조회.
 * 부서에 포함되어 있거나 포함되지 않은 사원도 모두 조회.
 */

SELECT *
  FROM 기준 테이블
  LEFT OUTER JOIN 참고 테이블
  -- 이 위의 순서를 맞춰야 함. (FROM 기준 테이블과, JOIN 참고 테이블)
    ON 기준테이블.PK = 참고테이블.FK -- 여기서는 순서 상관 없음.(같은 값)
;

SELECT EMP.FIRST_NAME
     , DEP.DEPARTMENT_NAME
  FROM EMPLOYEES EMP
  LEFT OUTER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
;

-- EMPLOYEES한테 DEPARTMENTS를 붙임


/*
 * 모든 도시에 위치한 부서를 조회.
 * 도시, 부서명
 */

-- 부서가 있던 없던 다 보여달라.


SELECT *
  FROM LOCATIONS LOC
  LEFT OUTER JOIN DEPARTMENTS DEP
    ON LOC.LOCATION_ID = DEP.LOCATION_ID
;

/*
 * 모든 도시의 도시별 부서의 개수를 조회
 * 도시명 | 부서 개수
 */

SELECT LOC.CITY
     , COUNT(DEP.DEPARTMENT_ID)
  FROM LOCATIONS LOC
  LEFT OUTER JOIN DEPARTMENTS DEP
    ON LOC.LOCATION_ID = DEP.LOCATION_ID
 GROUP BY LOC.CITY
;

-- COUNT에 1 넣으면 모든 게 1 나옴(NULL도)
-- NULL도 row가 있어서 하나로 잡아버림.
-- 그래서 Count를 세는 기준을 다른 칼럼으로 넣음.
-- -> null인 거 안 셈.

/*
 * 국가별 지역의 개수를 조회.
 */

SELECT COU.COUNTRY_NAME
     , COUNT(LOC.LOCATION_ID)
  FROM COUNTRIES COU
  LEFT OUTER JOIN LOCATIONS LOC
    ON COU.COUNTRY_ID = LOC.COUNTRY_ID
 GROUP BY COU.COUNTRY_NAME
;

/*
 * 직무별 사원의 수를 조회.
 */

-- 우리가 알고 싶은 거: 직무 목록
-- 기준 테이블: 직무 테이블

SELECT JOB.JOB_TITLE
     , COUNT(EMP.EMPLOYEE_ID) 
  FROM JOBS JOB
  LEFT OUTER JOIN EMPLOYEES EMP
    ON JOB.JOB_ID = EMP.JOB_ID
 GROUP BY JOB.JOB_TITLE
;

/*
 * 직무별 사원의 수를 조회.
 * 단, 사원의 수가 5명 이상인 직무만 조회.
 */

SELECT JOB.JOB_TITLE
     , COUNT(EMP.EMPLOYEE_ID) 
  FROM JOBS JOB
  LEFT OUTER JOIN EMPLOYEES EMP
    ON JOB.JOB_ID = EMP.JOB_ID
 GROUP BY JOB.JOB_TITLE 
HAVING COUNT(EMP.EMPLOYEE_ID) >= 5
;

/*
 * 사원이 단 한명도 없는 부서명을 조회한다.
 */


-- LEFT OUTER JOIN 사용
SELECT DEP.DEPARTMENT_NAME 
  FROM DEPARTMENTS DEP
  LEFT OUTER JOIN EMPLOYEES EMP
    ON DEP.DEPARTMENT_ID = EMP.EMPLOYEE_ID
 GROUP BY DEP.DEPARTMENT_NAME 
HAVING COUNT(EMP.EMPLOYEE_ID) = 0
;

-- GROUP BY 안 쓰는 경우
SELECT DEP.DEPARTMENT_NAME 
  FROM DEPARTMENTS DEP
  LEFT OUTER JOIN EMPLOYEES EMP
    ON DEP.DEPARTMENT_ID = EMP.EMPLOYEE_ID
 WHERE EMP.EMPLOYEE_ID IS NULL 
;


/*
 * 대륙별 지역의 수를 조회
 */

SELECT REG.REGION_NAME
     , COUNT(LOC.LOCATION_ID)
  FROM REGIONS REG
  LEFT OUTER JOIN COUNTRIES COU
    ON REG.REGION_ID = COU.REGION_ID
  LEFT OUTER JOIN LOCATIONS LOC
    ON COU.COUNTRY_ID = LOC.COUNTRY_ID
 GROUP BY REG.REGION_NAME
;


/*
 * 지역별 사원의 수를 조회
 */

SELECT LOC.CITY
     , COUNT(EMP.EMPLOYEE_ID)
  FROM LOCATIONS LOC
  LEFT OUTER JOIN DEPARTMENTS DEP
    ON LOC.LOCATION_ID = DEP.LOCATION_ID
  LEFT OUTER JOIN EMPLOYEES EMP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 GROUP BY LOC.CITY
 ;


/*
 * INLINE VIEW 문제
 * 2005년에 입사한 사원들의 부서명과 이름을 조회
 */

-- 이너 조인도 가능하지만, 범위 줄이기 위해 INLINE VIEW 사용

SELECT DEP.DEPARTMENT_NAME
     , EMP_05.FIRST_NAME
  FROM (SELECT FIRST_NAME
             , DEPARTMENT_ID
          FROM EMPLOYEES
         WHERE HIRE_DATE BETWEEN TO_DATE('2005-01-01') AND TO_DATE('2005-12-31') ) EMP_05 -- INLINE VIEW
 INNER JOIN DEPARTMENTS DEP 
    ON EMP_05.DEPARTMENT_ID = DEP.DEPARTMENT_ID
;

-- 그냥 JOIN 한 것처럼 같은 결과 나옴.


SELECT DEP.DEPARTMENT_NAME
     , EMP_05.FIRST_NAME
  FROM (SELECT FIRST_NAME
             , DEPARTMENT_ID
          FROM EMPLOYEES
         WHERE HIRE_DATE BETWEEN TO_DATE('2005-01-01', 'YYYY-MM-DD') AND TO_DATE('2005-12-31', 'YYYY-MM-DD') ) EMP_05 -- INLINE VIEW
 INNER JOIN DEPARTMENTS DEP 
    ON EMP_05.DEPARTMENT_ID = DEP.DEPARTMENT_ID
;


/*
 * 연봉을 많이 받는 사람들 중 상위 10명의 이름과 부서명을 조회
 */


-- 연봉을 많이 받는 사원 상위 10명 조회


SELECT *
  FROM EMPLOYEES
 WHERE ROWNUM <= 10 -- ROW에서 10개만
;
-- 10개 가져온 후에 정렬해서 문제 발생.
-- 다른 방법 있지만, 인라인 뷰에서 어떻게 하는지 볼 거임.

SELECT *
  FROM (SELECT *
  		  FROM EMPLOYEES
         ORDER BY SALARY DESC)
  WHERE ROWNUM <= 10
;
-- 정렬된 데이터가 나옴.


-- 부서명까지 조회

SELECT *
  FROM (SELECT *
  		  FROM EMPLOYEES
         ORDER BY SALARY DESC) EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 WHERE ROWNUM <= 10
;


SELECT EMP.FIRST_NAME
     , DEP.DEPARTMENT_NAME
  FROM (SELECT FIRST_NAME
             , DEPARTMENT_ID
  		  FROM EMPLOYEES
         ORDER BY SALARY DESC) EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 WHERE ROWNUM <= 10
;

/*
 * 이름으로 내림차순 정렬된 데이터 중 상위 20개의
 * 사원번호, 이름, 부서명을 조회
 */

-- 1. 이름으로 내림차순된 데이터 가져오기

SELECT FIRST_NAME
  FROM EMPLOYEES
 ORDER BY FIRST_NAME DESC
;

SELECT EMP.EMPLOYEE_ID
     , EMP.FIRST_NAME
     , DEP.DEPARTMENT_NAME 
  FROM (SELECT DEPARTMENT_ID
             , EMPLOYEE_ID
             , FIRST_NAME
          FROM EMPLOYEES
         ORDER BY FIRST_NAME DESC) EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 WHERE ROWNUM <= 20
;

-- 인라인 뷰 SELECT에서도 INNER JOIN ON에서 비교할 칼럼도 가져오기
-- JOIN ON에 조회할 칼럼도 가져오기


/*
 * 과제
 * 
 * 이름으로 오름차순된 데이터 중 상위 30개와
 * 부서명으로 내림차순 정렬된 데이터 중 상위 5개를 조인해
 * 이름, 부서명, 직무명을 조회
 * 
 */


/*
 * 사원수가 가장 많은 부서의 사원명, 부서명을 조회
 * 
 */

-- 사원수가 가장 많은 부서 (사원 수 정렬)
SELECT COUNT(1) AS CNT
     , DEPARTMENT_ID
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
 ORDER BY CNT DESC
;
-- 그 중 1개 부서를 조회
SELECT DEPARTMENT_ID
  FROM (SELECT COUNT(1) AS CNT
             , DEPARTMENT_ID
          FROM EMPLOYEES
         GROUP BY DEPARTMENT_ID
         ORDER BY CNT DESC)
 WHERE ROWNUM = 1
 
-- 완성
SELECT DEP.DEPARTMENT_NAME 
     , EMP.FIRST_NAME 
  FROM (SELECT DEPARTMENT_ID
		  FROM (SELECT COUNT(1) AS CNT
		             , DEPARTMENT_ID
		          FROM EMPLOYEES
		         GROUP BY DEPARTMENT_ID
		         ORDER BY CNT DESC)
		 WHERE ROWNUM = 1) TOP_DEP
  INNER JOIN DEPARTMENTS DEP
     ON TOP_DEP.DEPARTMENT_ID = DEP.DEPARTMENT_ID 
  INNER JOIN EMPLOYEES EMP
     ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID 
;

SELECT DEP.DEPARTMENT_NAME 
     , EMP.FIRST_NAME 
  FROM DEPARTMENTS DEP
 INNER JOIN EMPLOYEES EMP
    ON DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID 
 WHERE DEP.DEPARTMENT_ID = (SELECT DEPARTMENT_ID
							  FROM (SELECT COUNT(1) AS CNT
							             , DEPARTMENT_ID
							          FROM EMPLOYEES
							         GROUP BY DEPARTMENT_ID
							         ORDER BY CNT DESC)
							 WHERE ROWNUM = 1)




















  




































































